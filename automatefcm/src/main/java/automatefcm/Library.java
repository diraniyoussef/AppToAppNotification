/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package automatefcm;

import java.io.FileInputStream;
//import java.io.FileNotFoundException;

import com.google.auth.oauth2.GoogleCredentials;
//import com.google.auth.oauth2.ComputeEngineCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.messaging.FirebaseMessaging;
import com.google.firebase.messaging.Message;
import com.google.firebase.messaging.Notification;
import com.google.firebase.messaging.Notification.Builder;

public class Library {
	public static void main(String[] args) {
        Library classUnderTest = new Library();
        //assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
        classUnderTest.someLibraryMethod();
//        System.out.println("ending testSomeLibraryMethod()");
    }
    public boolean someLibraryMethod() {
    	try {
    		//System.out.println("before serviceAccount");
			//https://firebase.google.com/docs/admin/setup    		
    		FileInputStream serviceAccount = //it's probably bad to place the json file explicitly. Better use the [System.Environment]::SetEnvironmentVariable('GOOGLE_APPLICATION_CREDENTIALS','C:\Users\Dirani\eclipse-workspace\automatefcm\citizenandpolice-83361-firebase-adminsdk-witzk-c777f8ddc1.json') in Power shell or (if it wasn't saved, which can be checked using [System.Environment]::SetEnvironmentVariable('GOOGLE_APPLICATION_CREDENTIALS','C:\Users\Dirani\eclipse-workspace\automatefcm\citizenandpolice-83361-firebase-adminsdk-witzk-c777f8ddc1.json') ) then set the environment variable manually
				  new FileInputStream("./citizenandpolice-83361-firebase-adminsdk-witzk-c777f8ddc1.json");
			//System.out.println("before options");
			FirebaseOptions options = new FirebaseOptions.Builder()
		  			  .setCredentials(GoogleCredentials.fromStream(serviceAccount)) 
					  /*had difficulty persisting the environment variable
						Then it persisted when I did it manually, Advanced System Settings -> Advanced tab -> Environment variables ...
						Then I just had to restart the eclipse IDE and it worked when run from the IDE but not in the exported jar file 
					  */
					  //.setCredentials( GoogleCredentials.getApplicationDefault() )  
		  			  .setDatabaseUrl("https://citizenandpolice-83361.firebaseio.com") 
		  			  .build();
			//System.out.println("before initializeApp");
			FirebaseApp defaultApp = FirebaseApp.initializeApp(options);
			
			System.out.println("My app is " + defaultApp.getName());
			FirebaseAuth defaultAuth = FirebaseAuth.getInstance(defaultApp);
			FirebaseDatabase defaultDatabase = FirebaseDatabase.getInstance(defaultApp);

			//https://firebase.google.com/docs/cloud-messaging/send-message
			// This registration token comes from the client FCM SDKs.
			String registrationToken = "dnDKnrnkTKaT_UWkMOjeC9:APA91bFSHf4aXpztUkKuTqqluy-E0vptv1akYkGby2tAZocPnbFlZnwTbAPESfZSNPe24qQmxLWp3lDe6s5iXEIq0bbXm40i3raHOfjVJUy05l14h8_owRnKm7mCRHHMaCIOY_Ohvkz3";

			// See documentation on defining a message payload.
			Builder builder = Notification.builder()
					.setTitle("A lovely title")
					.setBody("Jessy is the body");		
			Notification notification = builder.build();
			
			//Notification notification = new Notification("A title", "I'm a body ?");
			Message message = Message.builder()
			    .putData("score", "850")
			    .putData("time", "2:45")
			    .putData("Server's message", "Thank God I made it")			   
			    .setNotification(notification)
			    .setToken(registrationToken)
			    .build();

			// Send a message to the device corresponding to the provided
			// registration token.
			String response = FirebaseMessaging.getInstance(defaultApp).send(message);
			// Response is a message ID string.
			System.out.println("Successfully sent message : " + response);
			//System.out.println("after initializeApp");
    	} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

  			
  		System.out.println("ending someLibraryMehod()");
    	return true;
    }
}
